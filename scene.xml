<scene>
    <light>vec3(10.0, 10.0, 3.0)</light>
    <eye>vec3(0.0, 5.0, 12.0)</eye>
    <fog>
        <density>0.017</density>
        <color>vec3(1.0)</color>
    </fog>

    <material name="floor">
        <diffuse model="lambert">
            <color require="uniform sampler2D floorTex;">
                texture2D(floorTex, point.xz / 10.0).rgb * 5.0
            </color>
        </diffuse>
        <specular model="phong">
            <color>vec3(.1)</color>
            <shininess>0.07 * 128.0</shininess>
        </specular>
    </material>
    <material name="wall">
        <diffuse model="lambert">
            <color require="uniform sampler2D floorTex;">
                texture2D(floorTex, point.xy / 10.0).rgb * 5.0
            </color>
        </diffuse>
        <specular model="phong">
            <color>vec3(.1)</color>
            <shininess>0.07 * 128.0</shininess>
        </specular>
    </material>
    <material name="cube">
        <diffuse model="lambert"><color>vec3(.507554)</color></diffuse>
        <specular model="phong">
            <color>vec3(.508273)</color>
            <shininess>0.4 * 128.0</shininess>
        </specular>
    </material>
    <material name="glass">
        <diffuse model="lambert"><color>vec3(0.0, .5, 0.0)</color></diffuse>
        <specular model="phong">
            <color>vec3(0.0, .4, 0.0)</color>
            <shininess>0.7 * 128.0</shininess>
        </specular>
        <refract>
            <indexOfRefraction>0.7</indexOfRefraction>
            <factor>0.8</factor>
            <refractLimit> 100  </refractLimit>
        </refract>
    </material>
    <material name="mug_glass">
        <diffuse model="lambert"><color>vec3(.8, .8, .3)</color></diffuse>
        <specular model="phong">
            <color>vec3(0.2, .4, 0.3)</color>
            <shininess>0.8 * 128.0</shininess>
        </specular>
        <refract>
            <indexOfRefraction>0.8</indexOfRefraction>
            <factor>0.5</factor>
            <reflectLimit> 120 </reflectLimit>
        </refract>
    </material>
    <material name="julia">
        <diffuse model="lambert"><color>vec3(.1, .1, .8)</color></diffuse>
        <specular model="phong">
            <color>vec3(0.3, .3, 0.7)</color>
            <shininess>0.4 * 128.0</shininess>
        </specular>
    </material>
    <material name="torus">
        <diffuse model="lambert"><color>vec3(.6, .1, .6)</color></diffuse>
        <specular model="phong">
            <color>vec3(0.6, .3, 0.7)</color>
            <shininess>0.1 * 128.0</shininess>
        </specular>
    </material>

    <item name="item_floor">
        <shader>float item_floor( vec3 p ) { return p.y + 2.0; }</shader>
        <material>floor</material>
    </item>
    <item name="item_wall">
        <shader>float item_wall( vec3 p ) { return p.z + 15.0; }</shader>
        <material>wall</material>
    </item>
    <item name="julia">
        <shader>
        vec4 quatSq( vec4 q )
        {
           vec4 r;
           r.x   = q.x*q.x - dot( q.yzw, q.yzw );
           r.yzw = 2.0*q.x*q.yzw;
           return r;
        }

        vec4 quatMult( vec4 q1, vec4 q2 )
        {
           vec4 r;
           r.x   = q1.x*q2.x - dot( q1.yzw, q2.yzw );
           r.yzw = q1.x*q2.yzw + q2.x*q1.yzw + cross( q1.yzw, q2.yzw );
           return r;
        }

        vec4 c = vec4(-.4, .2, .3, -.2);

        float _julia( vec3 p )
        {
            const float ESCAPE_THRESHOLD = 1e1;
            vec4 q = vec4(p, 0.0);
            vec4 qp = vec4(1.0, 0.0, 0.0, 0.0);

            for (int i = 0; i &lt; 8; ++i) {
                qp = 2.0 * quatMult(q, qp);
                q = quatSq(q) + c;

                if( dot( q, q ) &gt; ESCAPE_THRESHOLD )
                   break;
            }

            float normQ = length(q);
            return 0.5 * normQ * log( normQ ) / length( qp );
        }

        float julia( vec3 p )
        {
            return _julia(p/2.0+vec3(0.0, -2.0, 0.0))*2.0;
        }
        </shader>
        <material>julia</material>
    </item>
    <item name="mug">
        <shader>
        float sdSphere( vec3 p, float s )
        {
            return length(p)-s;
        }

        float udBox( vec3 p, vec3 b )
        {
            return length(max(abs(p)-b, 0.0));
        }

        float udRoundBox( vec3 p, vec3 b, float r )
        {
            return length(max(abs(p)-b, 0.0))-r;
        }

        float sdTorus( vec3 p, vec2 t )
        {
            vec2 q = vec2(length(p.xz)-t.x,p.y);
            return length(q)-t.y;
        }

        float sdCylinder( vec3 p, vec3 c )
        {
            return length(p.xz-c.xy)-c.z;
        }

        float sdCone( vec3 p, vec2 c )
        {
            // c must be normalized
            float q = length(p.xy);
            return dot(c,vec2(q,p.z));
        }

        float sdPlane( vec3 p, vec4 n )
        {
            // n must be normalized
            return dot(p,n.xyz) + n.w;
        }

        float opS( float d1, float d2 )
        {
            return max(d1,-d2);
        }

        float _mug( vec3 p )
        {
            return min(
                        opS(
                            min(
                                max(sdCylinder(p, vec3(0.0, 0.0, 1.5)), abs(p.y) - clamp(p.y, 0.0, 3.0)),
                                sdTorus(p.yzx + vec3(-1.5, 0.0, -1.0), vec2(1.0, 0.2))
                                ),
                            sdCylinder(p, vec3(0.0, 0.0, 1.3))
                            ),
                        max(sdCylinder(p, vec3(0.0, 0.0, 1.3)), abs(p.y) - clamp(p.y, 0.0, .2))
                        );
        }

        float mug( vec3 p )
        {
            return _mug(p + vec3(0.0, 1.0, -6.0));
        }
        </shader>
        <material>mug_glass</material>
    </item>
    <item name="sphere1">
        <shader>
        float sdSphere( vec3 p, float s );
        float sphere1( vec3 p ) {
            return sdSphere(p+vec3(-3.0, -2.0, -3.0), 1.0);
        }
        </shader>
        <material>glass</material>
    </item>
    <item name="sphere2">
        <shader>
        float sdSphere( vec3 p, float s );
        float sphere2( vec3 p ) {
            return sdSphere(p+vec3(3.0, -2.0, -3.0), 1.0);
        }
        </shader>
        <material>glass</material>
    </item>
    <item name="torus">
        <shader>
        float sdTorus( vec3 p, vec2 t );
        float torus( vec3 p ) {
            p += vec3(-4.0, 0.0, 0.0);
            return sdTorus(p, vec2(1.0, 0.5));
        }
        </shader>
        <material>torus</material>
    </item>
</scene>
